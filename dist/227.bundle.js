"use strict";(self.webpackChunkmy_app=self.webpackChunkmy_app||[]).push([[227],{1227:(e,n,t)=>{t.r(n),t.d(n,{signWithApiKey:()=>c});var r=t(1605),s=t(6862);const c=async e=>{const{content:n,publicKey:t,privateKey:c}=e,i=await async function(e){const{uncompressedPrivateKeyHex:n,compressedPublicKeyHex:t}=e,s=(0,r.S)({uncompressedPrivateKeyHex:n,compressedPublicKeyHex:t});return await crypto.subtle.importKey("jwk",s,{name:"ECDSA",namedCurve:"P-256"},!1,["sign"])}({uncompressedPrivateKeyHex:c,compressedPublicKeyHex:t});return await async function(e){const{key:n,content:t}=e,r=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},n,(new TextEncoder).encode(t)),c=function(e){if(e.length%2!=0||0==e.length||e.length>132)throw new Error("Invalid IEEE P1363 signature encoding. Length: "+e.length);const n=a(e.subarray(0,e.length/2)),t=a(e.subarray(e.length/2,e.length));let r=0;const s=2+n.length+1+1+t.length;let c;return s>=128?(c=new Uint8Array(s+3),c[r++]=48,c[r++]=129,c[r++]=s):(c=new Uint8Array(s+2),c[r++]=48,c[r++]=s),c[r++]=2,c[r++]=n.length,c.set(n,r),r+=n.length,c[r++]=2,c[r++]=t.length,c.set(t,r),c}(new Uint8Array(r));return(0,s.pD)(c)}({key:i,content:n})};function a(e){let n=0;for(;n<e.length&&0==e[n];)n++;n==e.length&&(n=e.length-1);let t=0;128&~e[n]||(t=1);const r=new Uint8Array(e.length-n+t);return r.set(e.subarray(n),t),r}},1605:(e,n,t)=>{t.d(n,{S:()=>c});var r=t(1972),s=t(6862);function c(e){const{uncompressedPrivateKeyHex:n,compressedPublicKeyHex:t}=e;let c;try{c=(0,r.b)((0,s.Ks)(t))}catch(e){throw new Error("unable to load API key: invalid public key. Did you switch your public and private key?")}return c.d=(0,s.el)(n,s.Ev),c}}}]);